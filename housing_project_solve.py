# -*- coding: utf-8 -*-
"""housing_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KNsAGlGGZ_kt4Xie1o2yXC8J6qELOLAX

***housing project***
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split #split data ino training data and test data 
import pandas as pnd

data_frame=pnd.read_csv("Housing.csv")
data_frame.head()
#les trois premières colonnes: features
#la dernière colonne target

y_data=data_frame['price'].values
X_area=data_frame['area'].values
X_bedrooms=data_frame['bedrooms'].values
X_bathrooms=data_frame['bathrooms'].values
x_area=np.array(X_area)
x_bedrooms=np.array(X_bedrooms)
x_bathrooms=np.array(X_bathrooms)
y=np.array(y_data)

print(y)

plt.figure(figsize=(8,6))
plt.title('Data area')
plt.scatter(X_area,y)
plt.xlabel('area')
plt.ylabel('price')
plt.show()

plt.figure(figsize=(8,6))
plt.title('Data bedrooms')
plt.scatter(x_bedrooms,y)
plt.xlabel('area')
plt.ylabel('price')
plt.show()

plt.figure(figsize=(8,6))
plt.title('Data bathrooms')
plt.scatter(x_bathrooms,y)
plt.xlabel('area')
plt.ylabel('price')
plt.show()

def train4(x1,x2,x3,y):
    #hyperparameters initialisation: tuning parameters
    learning_rate=0.01
    epochs=10
    #model parameters initialisation
    w1=0.5 #
    w2=0.5
    w3=0.5
    bias=0.5
    #recherche.....
    #----------------------
    n=len(y) #data size
       
 
    #training
    for i in range(epochs):
        yhat=bias+w1*x1+w2*x2+w3*x3 #prediction

        dw1=(-2/n)*np.sum(x1*(y-yhat)) # partial derivate of mse / w1
        dw2=(-2/n)*np.sum(x2*(y-yhat)) # partial derivate of mse / w1
        dw3=(-2/n)*np.sum(x3*(y-yhat)) # partial derivate of mse / w1
        
        dbias=(-2/n)*np.sum((y-yhat)) #partial derivate of mse / bias
        
        w1=w1-dw1*learning_rate  #update w1
        w2=w2-dw2*learning_rate  #update w2
        w3=w3-dw3*learning_rate  #update w3
        
        bias=bias-dbias*learning_rate #update bias
        
    return bias,w1,w2,w3

#traning
bias,w1,w2,w3=train4(x_area,x_bedrooms,x_bathrooms,y)

def predict(x1,x2,x3):
    return bias+w1*x1+w2*x2+w3*x3

#data test
x1,x2,x3=x_area,x_bedrooms,x_bathrooms
#prediction
yhat=predict(x1,x2,x3)

def mse(y,yhat):
    return 1/(len(y))*np.sum((y-yhat)**2)

mseModel1=mse(y,yhat)
print(mseModel1)